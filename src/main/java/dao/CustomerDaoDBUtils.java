package dao;

import constants.SqlQueries;
import model.Customer;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.stream.Collectors;

/**
 * Class CustomerDaoDBUtils extends functionality of CustomerDao.
 * Implements methods using Apache DBUtils.
 */
public class CustomerDaoDBUtils extends CustomerDao {

    /**
     * Extracts a single customer from the database by ID.
     * Uses Apache DBUtils ResultSetHandler for mapping db data to pojo.
     *
     * @param id the id of the customer
     * @return Customer object
     */
    @Override
    public Customer getById(int id) {

        Customer customer = null;

        QueryRunner run = new QueryRunner();

        // Use the BeanHandler implementation to convert the first
        // ResultSet row into a Customer JavaBean.
        ResultSetHandler<Customer> handler = new BeanHandler<>(Customer.class);

        try {
            // Execute the SQL statement with one replacement parameter and
            // return the results in a new Customer object generated by the BeanHandler.
            customer = run.query(connection,
                    String.format(SqlQueries.GET_CUSTOMER_BY_ID, id), handler);

            if (customer != null) {
                System.out.println(customer);
            } else {
                logger.log(Level.INFO, EMPTY_RESULT_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return customer;
    }

    /**
     * Extracts a list of objects from the database by a List of IDs.
     * Uses Apache DBUtils ResultSetHandler for mapping db data to pojo.
     *
     * @param ids a list of ids of customers
     * @return a list of Customer objects
     */
    @Override
    public List<Customer> getByIds(List<Integer> ids) {

        List<Customer> customers = new ArrayList<>();

        QueryRunner run = new QueryRunner();

        // Use the BeanListHandler implementation to convert all
        // ResultSet rows into a List of Person JavaBeans.
        ResultSetHandler<List<Customer>> handler = new BeanListHandler<>(Customer.class);

        try {
            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
            customers = run.query(connection, String.format(SqlQueries.GET_CUSTOMERS_BY_IDS, ids
                    .stream()
                    .map(Object::toString)
                    .collect(Collectors.joining(", "))), handler);

            if (customers != null) {
                for (Customer customer : customers) {
                    System.out.println(customer);
                }
            } else {
                logger.log(Level.INFO, EMPTY_RESULT_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return customers;
    }
}
