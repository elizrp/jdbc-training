package helpers.daoHelpers;

import constants.SqlQueries;
import helpers.daoHelpers.DaoHelper;
import helpers.staticSingletonConnection.StaticSingletonConnectionHelper;
import org.apache.commons.dbutils.BasicRowProcessor;
import org.apache.commons.dbutils.GenerousBeanProcessor;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.stream.Collectors;

/**
 * Generic class DBUtilsMapperHelper extends functionality of DaoHelper.
 * Implements methods using Apache DBUtils.
 */
public class DBUtilsMapperHelper<T> extends DaoHelper implements SqlQueries {

    final Class<T> typeParameterClass;

    public DBUtilsMapperHelper(Class<T> typeParameterClass) {
        this.typeParameterClass = typeParameterClass;
    }

    /**
     * Generic method for extracting a single object from the database by ID.
     * Uses Apache DBUtils ResultSetHandler for mapping db data to pojo.
     *
     * @param id    the id of the object
     * @param query the SQL query to be run
     * @return T object
     */
    public T getById(int id, String query) {

        T object = null;
        QueryRunner runner = new QueryRunner();

        // use the BeanHandler implementation to convert the first ResultSet row into a <T> JavaBean
        // use GenerousBeanProcessor which ignores underscore and case sensitivity from column name
        ResultSetHandler<T> handler =
                new BeanHandler<T>(typeParameterClass, new BasicRowProcessor(new GenerousBeanProcessor()));


        try (Connection connection = StaticSingletonConnectionHelper.getInstance().getConnection()) {
            // execute the SQL statement with one replacement parameter and
            // return the results in a new T object generated by the BeanHandler
            object = runner.query(connection, String.format(query, id), handler);

            if (object == null) {
                logger.log(Level.INFO, EMPTY_RESULT_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return object;
    }

    /**
     * Generic method for extracting a list of objects from the database by a List of IDs.
     * Uses Apache DBUtils ResultSetHandler for mapping db data to pojo.
     *
     * @param ids   a list of ids of objects
     * @param query the SQL query to be run
     * @return a list of T objects
     */
    public List<T> getByIds(List<Integer> ids, String query) {

        List<T> objects = new ArrayList<>();
        QueryRunner runner = new QueryRunner();

        // use the BeanListHandler implementation to convert all ResultSet rows into a List of <T> JavaBeans
        // use GenerousBeanProcessor which ignores underscore and case sensitivity from column name
        ResultSetHandler<List<T>> handler =
                new BeanListHandler<>(typeParameterClass, new BasicRowProcessor(new GenerousBeanProcessor()));


        try (Connection connection = StaticSingletonConnectionHelper.getInstance().getConnection()) {
            // Execute the SQL statement and return the results in a List of
            // T objects generated by the BeanListHandler
            objects = runner.query(connection, String.format(query, ids
                    .stream()
                    .map(Object::toString)
                    .collect(Collectors.joining(", "))), handler);

            if (objects == null) {
                logger.log(Level.INFO, EMPTY_RESULT_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return objects;
    }

    /**
     * Generic method for extracting a list of objects from the database by a given id.
     * Uses Apache DBUtils ResultSetHandler for mapping db data to pojo.
     *
     * @param id    id of the record that corresponds to the searched results
     * @param query the SQL query to be run
     * @return a list of T objects
     */
    public List<T> getListById(int id, String query) {

        List<T> objects = new ArrayList<>();
        QueryRunner runner = new QueryRunner();

        // use the BeanListHandler implementation to convert all ResultSet rows into a List of <T> JavaBeans
        // use GenerousBeanProcessor which ignores underscore and case sensitivity from column name
        ResultSetHandler<List<T>> handler =
                new BeanListHandler<>(typeParameterClass, new BasicRowProcessor(new GenerousBeanProcessor()));


        try (Connection connection = StaticSingletonConnectionHelper.getInstance().getConnection()) {
            // Execute the SQL statement and return the results in a List of
            // T objects generated by the BeanListHandler
            objects = runner.query(connection, String.format(query, id), handler);

            if (objects == null) {
                logger.log(Level.INFO, EMPTY_RESULT_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return objects;
    }
}
