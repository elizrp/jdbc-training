package model;

import constants.SqlQueries;
import helpers.DaoHelper;
import helpers.staticSingletonConnection.StaticSingletonConnectionHelper;
import model.Customer;
import org.apache.commons.dbutils.BasicRowProcessor;
import org.apache.commons.dbutils.GenerousBeanProcessor;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.stream.Collectors;

public class DBUtilsMapperHelper<T> extends DaoHelper {

    public T getById(int id, String table) {

        T object = null;
        QueryRunner runner = new QueryRunner();

        // use the BeanHandler implementation to convert the first ResultSet row into a <T> JavaBean
        // use GenerousBeanProcessor which ignores underscore and case sensitivity from column name
        ResultSetHandler<T> handler =
                new BeanHandler<>((Class<T>) this.getClass(), new BasicRowProcessor(new GenerousBeanProcessor()));


        try (Connection connection = StaticSingletonConnectionHelper.getInstance().getConnection()) {
            // execute the SQL statement with one replacement parameter and
            // return the results in a new <Object> object generated by the BeanHandler.
            object = runner.query(connection,
                    String.format(SqlQueries.GET_RECORD_BY_ID, table, id), handler);

            if (object != null) {
                System.out.println(object);
            } else {
                logger.log(Level.INFO, EMPTY_RESULT_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return object;
    }

    public List<T> getByIds(List<Integer> ids, String table) {

        List<T> objects = new ArrayList<>();
        QueryRunner runner = new QueryRunner();

        // use the BeanListHandler implementation to convert all ResultSet rows into a List of Person JavaBeans
        // use GenerousBeanProcessor which ignores underscore and case sensitivity from column name
        ResultSetHandler<List<T>> handler =
                new BeanListHandler<>((Class<T>) this.getClass(), new BasicRowProcessor(new GenerousBeanProcessor()));


        try (Connection connection = StaticSingletonConnectionHelper.getInstance().getConnection()) {
            // Execute the SQL statement and return the results in a List of
            // Person objects generated by the BeanListHandler.
            objects = runner.query(connection, String.format(SqlQueries.GET_RECORDS_BY_IDS, table, ids
                    .stream()
                    .map(Object::toString)
                    .collect(Collectors.joining(", "))), handler);

            if (objects != null) {
                for (Object object : objects) {
                    System.out.println(object);
                }
            } else {
                logger.log(Level.INFO, EMPTY_RESULT_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return objects;
    }
}
